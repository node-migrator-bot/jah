/*globals module exports resource require window Module __main_module_name__ */
/*jslint undef: true, strict: true, white: true, newcap: true, browser: true, indent: 4 */
(function(){
"use strict";

var __main_module_name__ = '/main'

var process = {}
  , modulePaths = ['/__builtin__', '/__builtin__/libs', '/libs']
  , path; // path module, we will load this later

function require (request, parent) {
    return loadModule(request, parent).exports;
}

function resource (resourcePath) {
    var remotes = require('remote_resources')

    var res = __jah__.resources[resourcePath]
    if (!res) {
        throw new Error("Unable to find resource: " + resourcePath);
    }

    if (res.remote && !res.loaded) {
        return remotes.getRemoteResource(resourcePath)
    }

    return res.data
}

function resolveModulePath(request, parent) {
    // If not a relative path then search the modulePaths for it
    var start = request.substring(0, 2);
    if (start !== "./" && start !== "..") {
        return modulePaths;
    }

    var parentIsIndex = path.basename(parent.filename).match(/^index\.js$/),
        parentPath    = parentIsIndex ? parent.id : path.dirname(parent.id);

    // Relative path so searching inside parent's directory
    return [path.dirname(parent.filename)];
}

function findModulePath(id, dirs) {
    if (id.charAt(0) === '/') {
        dirs = [''];
    }
    for (var i = 0; i < dirs.length; i++) {
        var dir = dirs[i];
        var p = path.join(dir, id);

        // Check for index first
        if (fs.exists(path.join(p, 'index.js'))) {
            return path.join(p, 'index.js');
        } else if (fs.exists(p + '.js')) {
            return p + '.js';
        }
    }

    return false;
}

function loadModule(request, parent) {
    parent = parent || process.mainModule;

    var paths    = resolveModulePath(request, parent),
        filename = findModulePath(request, paths);

    if (filename === false) {
        throw new Error("Unable to find module: " + request);
    }


    if (parent) {
        var cachedModule = Module._moduleCache[filename];
        if (cachedModule) {
            return cachedModule;
        }
    }

    //console.log('Loading module: ', filename);

    var module = new Module(filename, parent);

    // Assign main module to process
    if (request == __main_module_name__ && !process.mainModule) {
        process.mainModule = module;
    }

    // Run all the code in the module
    module._initialize(filename);

    return module;
}

function Module(id, parent) {
    this.id = id;
    this.parent = parent;
    this.children = [];
    this.exports = {};

    if (parent) {
        parent.children.push(this);
    }
    Module._moduleCache = Module._moduleCache || {}
    Module._moduleCache[this.id] = this;

    this.filename = null;
    this.dirname = null;
}

Module.prototype._initialize = function (filename) {
    var module = this;
    function require(request) {
        return loadModule(request, module).exports;
    }

    this.filename = filename;

    // Work around incase this IS the path module
    if (path) {
        this.dirname = path.dirname(filename);
    } else {
        this.dirname = '';
    }

    require.paths = modulePaths;
    require.main = process.mainModule;

    var mod = __jah__.resources[this.filename]
    if (mod) {
      mod.data.apply(this.exports, [this.exports, require, resource, this, this.filename, this.dirname]);
    } else {
      throw new Error("Unable to find module: " + this.filename)
    }

    return this;
};

// Manually load the path module because we need it to load other modules
path = (new Module('path'))._initialize('/__builtin__/path.js').exports;

var util = loadModule('/__builtin__/').exports;

// Browser's DOM is ready for action
util.ready(function () {

    // Initialise the libs
    var key, lib
    for (key in __jah__.resources) {
        if (__jah__.resources.hasOwnProperty(key)) {
            // If matches /libs/<foo>/init.js then run foo.main()
            if (/^\/libs\/[^\/]+?\/init.js$/.test(key) || key == '/__builtin__/init.js') {
                lib = loadModule(key.replace(/\.js$/, '')).exports
                if (typeof lib.main == 'function') {
                    lib.main()
                }
            }
        }
    }

    // Initialise the main module
    process.mainModule = loadModule(__main_module_name__);

    // Run application's main function
    if (process.mainModule.exports.main) {
        process.mainModule.exports.main();
    }
});

})()
// vim:ft=javascript
